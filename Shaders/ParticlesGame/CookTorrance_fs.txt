#version 130
precision highp float;

smooth in vec3 v_normalView;
smooth in vec3 v_positionView;

uniform vec4 params; // x - specular intencity, y - roughness, z - index of reflection, w - metalic
uniform vec4 color;

const float PI = 3.141592;
const float INV_PI = 0.31830;
const float COLOR_INTENSITY = 5.0;
const float METALLIC_LIMIT = 0.5;
const vec3 LIGHT_COLOR = vec3(1.0, 1.0, 1.0);

out vec4 fragmentColor;

float ggx(const in float value)
{
    return value > 0.0 ? 1.0 : 0.0;
}

float ggxSchlick(const in vec3 vectorA, const in vec3 vectorB, const in float roughness)
{
    float alpha = max(dot(vectorA, vectorB), 0.0);
    return alpha / (alpha * (1.0 - roughness) + roughness);
}

float distribution(const in vec3 normalView, const in vec3 halfVectorView, const in float roughness)
{
    float alpha = dot(normalView, halfVectorView);
    float betta = roughness * roughness;
    float gamma = alpha * alpha;
    float zeta = alpha * betta + 1.0 - alpha;

    return (betta * ggx(alpha)) / (PI * zeta * zeta);
}

float geometryAttenuation(const in vec3 viewDirectionView, const in vec3 normalView,
                          const in vec3 lightDirectionView, const float roughness)
{
    return ggxSchlick(normalView, viewDirectionView, roughness) * ggxSchlick(normalView, lightDirectionView, roughness);
}

float fresnel(const in float ior, const in vec3 normalView, const in vec3 viewDirectionView)
{
    float alpha = (1.0 - ior) / (1.0 + ior);
    float betta = alpha * alpha;
    float gamma = pow(1.0 - max(dot(normalView, viewDirectionView), 0.0), 5.0);

    return betta + (1.0 - betta) * gamma;
}

void main()
{
    vec3 normalView = normalize(v_normalView);
    const vec3 lightDirectionView = vec3(0.0, 0.0, -1.0);
    vec3 viewDirectionView = normalize(-v_positionView);
    vec3 halfVectorView = normalize(lightDirectionView + viewDirectionView);

    float d = distribution(normalView, halfVectorView, params.y);
    float f = fresnel(params.z, normalView, viewDirectionView);
    float ga = geometryAttenuation(viewDirectionView, normalView, lightDirectionView, params.y);
    float alpha = dot(normalView, lightDirectionView);
    float betta = dot(normalView, viewDirectionView);

    vec3 specularColor;
    if (params.w < METALLIC_LIMIT) {
        specularColor = LIGHT_COLOR;
    } else {
        specularColor = color.rgb;
    }

    vec3 diffuse = COLOR_INTENSITY * INV_PI * (1.0 - params.x) * color.rgb
                   * max(dot(normalView, lightDirectionView), 0.0);
    vec3 specular = specularColor * COLOR_INTENSITY * params.x * (d * f * ga) / (4.0 * alpha * betta);

    fragmentColor = vec4(diffuse + specular, color.a);
}
